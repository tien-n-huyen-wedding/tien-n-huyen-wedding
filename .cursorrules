# Wedding Website - Cursor Rules

## Project Context
This is a wedding website built with Next.js 15, React 19, TypeScript, and Tailwind CSS. The project includes a template HTML wedding website that needs to be converted to a modern React application.

## Tech Stack
- **Framework**: Next.js 15 with App Router
- **React**: Version 19.1.0
- **Language**: TypeScript
- **Styling**: Tailwind CSS v4
- **Fonts**: Geist Sans & Geist Mono
- **Build Tool**: Turbopack
- **Linting**: ESLint with Next.js config

## Code Conventions

### File Structure
- Use the `src/app/` directory for Next.js App Router pages
- Components should be in `src/components/`
- Utilities and helpers in `src/lib/`
- Types and interfaces in `src/types/`
- Assets in `public/` directory
- Use absolute imports with `@/` prefix (configured in tsconfig.json)

### TypeScript Conventions
- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Use proper typing for React components with `React.FC` or explicit return types
- Export types and interfaces from dedicated files
- Use generic types for reusable components

### React/Next.js Conventions
- Use functional components with hooks
- Prefer `const` over `let` and avoid `var`
- Use proper React 19 patterns and features
- Implement proper error boundaries
- Use Next.js Image component for optimized images
- Use Next.js Link component for internal navigation
- Implement proper SEO with metadata API

### Component Structure
```typescript
// Component file structure
interface ComponentProps {
  // Props interface
}

export default function ComponentName({ prop1, prop2 }: ComponentProps) {
  // Component logic
  return (
    // JSX
  );
}
```

### Styling Conventions
- Use Tailwind CSS classes for styling
- Prefer utility classes over custom CSS
- Use responsive design patterns (sm:, md:, lg:, xl:)
- Implement dark mode support where appropriate
- Use CSS variables for theme customization
- Keep custom CSS minimal and in globals.css

### Wedding Website Specific Guidelines
- Focus on romantic, elegant design patterns
- Use soft color palettes (pastels, whites, golds)
- Implement smooth animations and transitions
- Ensure mobile-first responsive design
- Include wedding-specific sections:
  - Hero/landing section
  - About the couple
  - Wedding details (date, time, location)
  - Photo gallery
  - RSVP functionality
  - Guest book or messages
  - Timeline/schedule

### Performance Guidelines
- Optimize images using Next.js Image component
- Implement lazy loading for galleries
- Use proper loading states
- Minimize bundle size
- Implement proper caching strategies

### Accessibility
- Use semantic HTML elements
- Implement proper ARIA labels
- Ensure keyboard navigation
- Maintain proper color contrast
- Use descriptive alt text for images

### Code Quality
- Follow ESLint rules and fix all warnings
- Use meaningful variable and function names
- Implement proper error handling
- Add JSDoc comments for complex functions
- Keep components small and focused
- Use proper state management patterns

### File Naming
- Use kebab-case for files and directories
- Use PascalCase for React components
- Use camelCase for utilities and helpers
- Use descriptive names that indicate purpose

### Import/Export Conventions
- Use named exports for utilities and helpers
- Use default exports for React components
- Group imports: React/Next.js, third-party, local
- Use absolute imports with `@/` prefix

### Wedding Content Guidelines
- Use romantic and celebratory language
- Include personal touches and stories
- Ensure content is appropriate for all ages
- Include clear call-to-actions for RSVP
- Make information easily scannable
- Include contact information for questions

### Development Workflow
- Use `npm run dev` for development with Turbopack
- Use `npm run build` for production builds
- Use `npm run lint` to check code quality
- Test on multiple devices and browsers
- Ensure fast loading times

### Template Conversion Notes
- Convert HTML template sections to React components
- Maintain the original design aesthetic
- Improve performance with React optimizations
- Add interactivity and modern UX patterns
- Implement proper state management for dynamic content
- Convert jQuery dependencies to React hooks

## Common Patterns

### State Management
```typescript
// Use useState for local state
const [isOpen, setIsOpen] = useState(false);

// Use useReducer for complex state
const [state, dispatch] = useReducer(reducer, initialState);
```

### Event Handling
```typescript
// Use proper event typing
const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
  // Handle click
};
```

### API Integration
```typescript
// Use proper async/await patterns
const fetchData = async () => {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching data:', error);
  }
};
```

Remember: This is a wedding website, so prioritize user experience, visual appeal, and emotional connection. The code should be clean, maintainable, and performant to ensure a smooth experience for wedding guests.
